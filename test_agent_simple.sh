#!/bin/bash

# Simple Agent Test Script using Zhipu AI
# This script tests the agent with different scenarios and records results

echo "🧪 Agent Testing with Zhipu AI"
echo "================================"
echo ""

# Load API key from keys.yaml
API_KEY=$(grep -A 2 "zhipu:" keys.yaml | grep "api_key:" | awk '{print $2}' | tr -d '"')
MODEL=$(grep -A 3 "zhipu:" keys.yaml | grep "models:" -A 1 | tail -1 | awk '{print $2}' | tr -d '"-')

echo "📡 Provider: Zhipu AI"
echo "🤖 Model: $MODEL"
echo "================================"
echo ""

# Set environment variables
export ZHIPU_API_KEY="$API_KEY"

# Create test report directory
mkdir -p test_reports
REPORT_FILE="test_reports/agent_test_$(date +%Y%m%d_%H%M%S).md"

# Start report
cat > "$REPORT_FILE" << EOF
# Agent Test Report

**Date**: $(date)
**Provider**: Zhipu AI
**Model**: $MODEL

---

## Test Cases

EOF

# Test Case 1: Simple Code Task
echo "📋 Test Case 1: Simple Code Task"
echo "Task: Write a Rust function to calculate fibonacci numbers"
echo ""

START_TIME=$(date +%s)
cargo run --bin task-runner -- task "Write a Rust function to calculate fibonacci numbers" --output json > /tmp/test1.json 2>&1
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

if [ $? -eq 0 ]; then
    echo "✅ Success! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 1: Simple Code Task ✅

**Task**: Write a Rust function to calculate fibonacci numbers
**Duration**: ${DURATION}s
**Status**: Success

**Result**:
\`\`\`
$(cat /tmp/test1.json | jq -r '.summary' 2>/dev/null || echo "See /tmp/test1.json")
\`\`\`

---

EOF
else
    echo "❌ Failed! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 1: Simple Code Task ❌

**Task**: Write a Rust function to calculate fibonacci numbers
**Duration**: ${DURATION}s
**Status**: Failed

**Error**:
\`\`\`
$(cat /tmp/test1.json)
\`\`\`

---

EOF
fi

echo ""

# Test Case 2: Simple Question
echo "📋 Test Case 2: Simple Question"
echo "Task: What is Rust programming language?"
echo ""

START_TIME=$(date +%s)
cargo run --bin task-runner -- task "What is Rust programming language?" --output json > /tmp/test2.json 2>&1
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

if [ $? -eq 0 ]; then
    echo "✅ Success! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 2: Simple Question ✅

**Task**: What is Rust programming language?
**Duration**: ${DURATION}s
**Status**: Success

**Result**:
\`\`\`
$(cat /tmp/test2.json | jq -r '.summary' 2>/dev/null || echo "See /tmp/test2.json")
\`\`\`

---

EOF
else
    echo "❌ Failed! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 2: Simple Question ❌

**Task**: What is Rust programming language?
**Duration**: ${DURATION}s
**Status**: Failed

**Error**:
\`\`\`
$(cat /tmp/test2.json)
\`\`\`

---

EOF
fi

echo ""

# Test Case 3: Data Analysis
echo "📋 Test Case 3: Data Analysis"
echo "Task: Analyze the performance metrics: CPU 80%, Memory 60%, Disk 40%"
echo ""

START_TIME=$(date +%s)
cargo run --bin task-runner -- task "Analyze the performance metrics: CPU 80%, Memory 60%, Disk 40%" --output json > /tmp/test3.json 2>&1
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

if [ $? -eq 0 ]; then
    echo "✅ Success! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 3: Data Analysis ✅

**Task**: Analyze the performance metrics: CPU 80%, Memory 60%, Disk 40%
**Duration**: ${DURATION}s
**Status**: Success

**Result**:
\`\`\`
$(cat /tmp/test3.json | jq -r '.summary' 2>/dev/null || echo "See /tmp/test3.json")
\`\`\`

---

EOF
else
    echo "❌ Failed! Duration: ${DURATION}s"
    cat >> "$REPORT_FILE" << EOF
### Test Case 3: Data Analysis ❌

**Task**: Analyze the performance metrics: CPU 80%, Memory 60%, Disk 40%
**Duration**: ${DURATION}s
**Status**: Failed

**Error**:
\`\`\`
$(cat /tmp/test3.json)
\`\`\`

---

EOF
fi

echo ""
echo "================================"
echo "📊 Test Summary"
echo "================================"
echo ""
echo "📄 Full report saved to: $REPORT_FILE"
echo ""

# Add summary to report
cat >> "$REPORT_FILE" << EOF

## Summary

**Total Tests**: 3
**Report Location**: $REPORT_FILE

## Analysis

### Observations

1. **Response Quality**: Check if responses are accurate and helpful
2. **Performance**: Monitor response times
3. **Error Handling**: Verify error messages are clear

### Optimization Suggestions

1. **Prompt Engineering**: Review and optimize prompts for better results
2. **Model Parameters**: Adjust temperature and max_tokens if needed
3. **Error Handling**: Improve error recovery mechanisms
4. **Caching**: Consider caching common responses

---

*Generated by Agent Test Script*
EOF

echo "✅ Testing complete!"
echo ""

